import { Connection } from '@solana/web3.js';
import { NextApiRequest, NextApiResponse } from 'next';

// –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const connection = new Connection("https://api.devnet.solana.com");

const EXPECTED_RECEIVER_PUBLIC_KEY = "J5vSjmTn4yhetWWncr5KzC1VbrgPVwEQ3BeBT4bs4CrC";

interface ParsedInstruction {
    type: string;
    info: {
        source?: string;
        destination?: string;
        amount?: number;
    };
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≥–¥–µ-—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞)
const verifyTransaction = async (transactionId: string, expectedPublicKey: string, expectedAmount: number) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const tx = await connection.getTransaction(transactionId, { commitment: "finalized" });

        if (!tx) {
            console.log("‚ùå –û—à–∏–±–∫–∞: —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
            return false;
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const instructions = tx.transaction.message.instructions;
        let senderPublicKey: string | null = null;
        let receiverPublicKey: string | null = null;
        let actualAmount: number = 0;

        for (const instruction of instructions) {
            if ("parsed" in instruction && typeof instruction.parsed === "object" && instruction.parsed !== null) {
                const parsed = instruction.parsed as ParsedInstruction; // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø –≤–º–µ—Å—Ç–æ any
        
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–µ—Ä–µ–≤–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤ (SPL Token Program)
                if (parsed.type === "transfer" && parsed.info.source && parsed.info.destination && parsed.info.amount) {
                    senderPublicKey = parsed.info.source;
                    receiverPublicKey = parsed.info.destination;
                    const rawAmount = parsed.info.amount; // üü¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö
        
                    // ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ–º `decimals` —É —Ç–æ–∫–µ–Ω–∞
                    const decimals = 3; // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—Ç—å `decimals` (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
                    actualAmount = rawAmount / (10 ** decimals);
                }
            }
        }
      

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º publicKey
        if (senderPublicKey !== expectedPublicKey) {
            console.log(`‚ùå –û—à–∏–±–∫–∞: —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –æ—Ç ${expectedPublicKey}, –∞ –æ—Ç ${senderPublicKey}`);
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—å ‚Äî —ç—Ç–æ –Ω–∞—à –∫–æ—à–µ–ª–µ–∫ (–±–∞–Ω–∫ –∏–≥—Ä—ã)
        if (receiverPublicKey !== EXPECTED_RECEIVER_PUBLIC_KEY) {
            console.log(`‚ùå –û—à–∏–±–∫–∞: –¥–µ–Ω—å–≥–∏ —É—à–ª–∏ –Ω–µ –≤ –Ω–∞—à –∫–æ—à–µ–ª–µ–∫, –∞ –≤ ${receiverPublicKey}`);
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π
        if (actualAmount < expectedAmount) {
            console.log(`‚ùå –û—à–∏–±–∫–∞: —Å—É–º–º–∞ ${actualAmount} SOL –º–µ–Ω—å—à–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö ${expectedAmount} SOL`);
            return false;
        }

        console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${transactionId} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: ${actualAmount} SOL –æ—Ç ${senderPublicKey} –∫ ${receiverPublicKey}`);
        return true;
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", error);
        return false;
    }
};

// API Route
export default async function handler(req: NextApiRequest, res: NextApiResponse) {
    if (req.method !== 'POST') {
        return res.status(405).json({ message: '–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω' });
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    const { transactionId, publicKey, amount } = req.body;

    if (!transactionId || !publicKey || !amount) {
        return res.status(400).json({ message: "‚ùå –û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!" });
    }

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        const isTransactionValid = await verifyTransaction(transactionId, publicKey, amount);

        if (!isTransactionValid) {
            return res.status(400).json({ message: "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–∞—è –∏–ª–∏ –ø–æ–¥–¥–µ–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è!" });
        }

        // ‚úÖ –ï—Å–ª–∏ –≤—Å—ë –æ–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
        res.json({ message: "‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞" });

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", error);
        res.status(500).json({ message: "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!" });
    }
}
