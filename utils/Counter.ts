import { Metadata, Metaplex, keypairIdentity } from "@metaplex-foundation/js";
import { Connection, PublicKey } from "@solana/web3.js";
import sqlite3 from "sqlite3";
import dotenv from "dotenv";
dotenv.config();


// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Solana
const SOLANA_RPC_URL = "https://api.devnet.solana.com"; // –∏–ª–∏ —Å–≤–æ–π RPC
const connection = new Connection(SOLANA_RPC_URL);

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Metaplex
const metaplex = Metaplex.make(connection);

const BIK_AUTH = process.env.BIK_AUTH;
const KRISA_AUTH = process.env.KRISA_AUTH;
const DRAGON_AUTH = process.env.DRAGON_AUTH;
const PERCENT_AUTH = process.env.PERCENT_AUTH;

const isTextValue = (value: any): boolean => typeof value === "string" && isNaN(+value);

const parseTextValue = (value: any): { percentage: number, type: "SelfPoints" | "TeamPoints" | null } => {
  if (typeof value !== "string") return { percentage: 0, type: null };

  const match = value.match(/^(\d+(\.\d+)?)%\s*of\s*(SelfPoints|TeamPoints)$/i);
  if (match) {
      return {
          percentage: Number(match[1]) / 100, // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º "10%" ‚Üí 0.1
          type: match[3] as "SelfPoints" | "TeamPoints" // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫ —á–µ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ø—Ä–æ—Ü–µ–Ω—Ç
      };
  }

  return { percentage: 0, type: null }; // –õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç ‚Üí 0
};

const applyPercentage = (data: { percentage: number; type: "SelfPoints" | "TeamPoints" | null }, selfPoints: number, teamPoints: number): number => {
  if (data.type === "SelfPoints") {
      return selfPoints * data.percentage; // –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –ª–∏—á–Ω—ã—Ö –æ—á–∫–æ–≤
  } else if (data.type === "TeamPoints") {
      return teamPoints * data.percentage; // –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –∫–æ–º–∞–Ω–¥–Ω—ã—Ö –æ—á–∫–æ–≤
  }
  return 0; // –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞, –≤–µ—Ä–Ω—É—Ç—å 0
};

type NftOwnershipResult = {
    owned: boolean;
    selfPoints: number;
    teamPoints: number;
    updateAuthority: string | null;
  };

  const checkNftOwnership = async (
    playerPublicKey: string,
    nftAnimalKey: string,
    nftAuthorityCheck: string,
    playerScore: number,
    teamScore: number
  ): Promise<NftOwnershipResult> => {
    try {
      const savedUpdateAuthority = new PublicKey(nftAuthorityCheck);
      const nftPublicKey = new PublicKey(nftAnimalKey);
      const publicKey = new PublicKey(playerPublicKey);
  
      if (publicKey.toBase58() === nftPublicKey.toBase58() && publicKey.toBase58() === savedUpdateAuthority.toBase58()) {
        console.log(`‚ö† –ò–≥—Ä–æ–∫ ${playerPublicKey} –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç NFT`);
        return { owned: false, selfPoints: 1, teamPoints: 1, updateAuthority: null };
    }
    
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–ª–∞–¥–µ–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ NFT
      const assets = await metaplex.nfts().findAllByOwner({ owner: publicKey });
      
      const metadataAssets = assets.filter(asset => asset.model === "metadata") as Metadata[];
      const nft = metadataAssets.find(asset => asset.mintAddress.equals(nftPublicKey));
      if (!nft) {
        console.log(`‚ö† –ò–≥—Ä–æ–∫ ${playerPublicKey} –Ω–µ –≤–ª–∞–¥–µ–µ—Ç NFT ${nftPublicKey.toBase58()}`);
        return { owned: false, selfPoints: 0, teamPoints: 0, updateAuthority: null };
      }
  
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ NFT
      const nftMetadata = await metaplex.nfts().findByMint({ mintAddress: nftPublicKey });
      if (!nftMetadata || !nftMetadata.json) {
        console.log(`‚ö† –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è ${nftPublicKey.toBase58()} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
        return { owned: true, selfPoints: 0, teamPoints: 0, updateAuthority: null };
      }
  
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º updateAuthority
      const updateAuthority = nftMetadata.updateAuthorityAddress?.toBase58() || null;
      if (!updateAuthority || updateAuthority !== savedUpdateAuthority.toBase58()) {
        console.log(
          `‚ö† updateAuthority –¥–ª—è ${nftPublicKey.toBase58()} (${updateAuthority}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º (${savedUpdateAuthority.toBase58()})`
        );
        return { owned: true, selfPoints: 0, teamPoints: 0, updateAuthority: null };
      }
  
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
      const attributes = nftMetadata.json.attributes || [];
      const selfPointsAttr = attributes.find(attr => attr.trait_type === "SelfPoints");
      const teamPointsAttr = attributes.find(attr => attr.trait_type === "TeamPoints");

      const isSelfPointsText = isTextValue(selfPointsAttr?.value);
      const isTeamPointsText = isTextValue(teamPointsAttr?.value);

      
      let selfPoints = 0;
      let teamPoints = 0;

      if (isSelfPointsText) {
        const selfPointsData = parseTextValue(selfPointsAttr?.value)
        selfPoints = applyPercentage(selfPointsData, playerScore, teamScore)
      } else {
        selfPoints = selfPointsAttr?.value ? Number(selfPointsAttr.value) || 0 : 0;
      }

      if (isTeamPointsText) {
        const teamPointsData = parseTextValue(teamPointsAttr?.value)
        teamPoints = applyPercentage(teamPointsData, playerScore, teamScore)
      } else {
        teamPoints = selfPointsAttr?.value ? Number(selfPointsAttr.value) || 0 : 0;
      }

      
      // selfPoints = selfPointsAttr?.value ? Number(selfPointsAttr.value) || 0 : 0;
      // teamPoints = selfPointsAttr?.value ? Number(selfPointsAttr.value) || 0 : 0;
  
      console.log(
        `‚úÖ –ò–≥—Ä–æ–∫ ${playerPublicKey} –≤–ª–∞–¥–µ–µ—Ç NFT ${nftPublicKey.toBase58()}. SelfPoints: ${selfPoints}, TeamPoints: ${teamPoints}, UpdateAuthority: ${updateAuthority}`
      );
  
      return { owned: true, selfPoints, teamPoints, updateAuthority };
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–ª–∞–¥–µ–Ω–∏—è NFT –¥–ª—è ${playerPublicKey}:`, error);
      return { owned: false, selfPoints: 0, teamPoints: 0, updateAuthority: null };
    }
  };


const updateTeamPoints = async (team1Score: number, team2Score: number) => {

    console.log("üõ† –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–Ω—ã—Ö –æ—á–∫–æ–≤...");

    try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ animalkey (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—É–±–ª–∏)
        const players = await new Promise<any[]>((resolve, reject) => {
            db.all("SELECT publickey, personal_points, team, animalkey, animalkeycontrol FROM users", (err, rows) => {
                if (err) reject(err);
                else resolve(rows);
            });
        });

        if (players.length === 0) {
            console.log("‚ö† –ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.");
            return;
        }

        const usedNfts = new Set<string>();

        const validNftKeys = new Set([BIK_AUTH, KRISA_AUTH, DRAGON_AUTH, PERCENT_AUTH]);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        for (const player of players) {
            let selfPoints = 0;
            let teamPoints = 0;

            if (!validNftKeys.has(player.animalkeycontrol) && player.animalkeycontrol !== player.publickey) {
                console.log(`üö´ –ò–≥—Ä–æ–∫ ${player.publickey} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ–ª–µ–≥–∏—Ç–∏–º–Ω—ã–π NFT (${player.animalkeycontrol}). –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`);
                continue;
            }

            const playerTeamScore = player.team === 1 ? team1Score : team2Score;

            const { owned, selfPoints: nftSelfPoints, teamPoints: nftTeamPoints } = await checkNftOwnership(player.publickey, player.animalkey, player.animalkeycontrol, player.personal_points, playerTeamScore);

            if (owned && usedNfts.has(player.animalkey)) {
                console.log(`‚ö† NFT ${player.animalkey} —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å –≤ —ç—Ç–æ–º –∑–∞–ø—É—Å–∫–µ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${player.publickey}.`);
                continue;
            }

            if (owned) {
                selfPoints = nftSelfPoints;
                teamPoints = nftTeamPoints;
                usedNfts.add(player.animalkey);
            } else if (player.animalkeycontrol === player.publickey) {
                selfPoints = 1;
                teamPoints = 1;
            } else {
                console.log(`‚ö† –ò–≥—Ä–æ–∫ ${player.publickey} –Ω–µ –∏–º–µ–µ—Ç NFT. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`);
                continue;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
            await new Promise((resolve, reject) => {
                db.run(
                    "UPDATE users SET personal_points = personal_points + ?, team_points = team_points + ?, animalkey = ?, animalkeycontrol = ?, animal_image = ? WHERE publickey = ?",
                    [selfPoints, teamPoints, player.publickey, player.publickey, "/Avatar.png", player.publickey],
                    function (err) {
                        if (err) reject(err);
                        else resolve(null);
                    }
                );
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –∫–æ–º–∞–Ω–¥–µ
            await new Promise((resolve, reject) => {
                db.run(
                    "UPDATE teams SET score = score + ? WHERE id = ?",
                    [teamPoints, player.team],
                    function (err) {
                        if (err) reject(err);
                        else resolve(null);
                    }
                );
            });

            console.log(`‚úÖ –ò–≥—Ä–æ–∫ ${player.publickey}: +${selfPoints} SelfPoints, +${teamPoints} TeamPoints.`);
        }

        console.log("‚úÖ –í—Å–µ –æ—á–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!");

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—á–∫–æ–≤:", error);
    }
};

const getTeamScores = async (): Promise<{ team1Score: number, team2Score: number }> => {
  return new Promise((resolve, reject) => {
      db.all("SELECT id, score FROM teams", (err, rows: any[]) => { // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º `any[]` –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–≥–∏—Ö —Ç–∏–ø–æ–≤
          if (err) {
              console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SELECT –∑–∞–ø—Ä–æ—Å–∞:", err);
              reject(err);
              return;
          }

          console.log("üîç –î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã teams:", rows); // –û—Ç–ª–∞–¥–∫–∞

          if (!Array.isArray(rows) || rows.length < 2) {
              reject(new Error("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ—á–∫–æ–≤."));
              return;
          }

          const team1Score = Number(rows[0]?.score) || 0;
          const team2Score = Number(rows[1]?.score) || 0;

          console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –æ—á–∫–∏ –∫–æ–º–∞–Ω–¥: Team 1 = ${team1Score}, Team 2 = ${team2Score}`);

          resolve({ team1Score, team2Score });
      });
  });
};

const checkColumnExists = async (columnName: string, tableName: string): Promise<boolean> => {
    return new Promise<boolean>((resolve, reject) => {
      db.all(`PRAGMA table_info(${tableName})`, (err, rows: { name: string }[]) => { // ‚úÖ –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø
        if (err) {
          reject(err);
          return;
        }
  
        const columnExists = rows.some((row) => row.name === columnName);
        resolve(columnExists);
      });
    });
  };
  
  
// –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database("game.db");

// ‚ö° –ó–∞–¥–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–≤ UTC)
const EXECUTION_HOUR = 14;  // –ß–∞—Å—ã (–æ—Ç 0 –¥–æ 23)
const EXECUTION_MINUTE = 43; // –ú–∏–Ω—É—Ç—ã (–æ—Ç 0 –¥–æ 59)


// –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
const dailyFunction = async () => {
    console.log(`‚úÖ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –≤ ${EXECUTION_HOUR}:${EXECUTION_MINUTE} UTC`);

    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (–¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ)
    const { team1Score, team2Score } = await getTeamScores();
    
    await updateTeamPoints(team1Score, team2Score)

    console.log("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
};

// –§—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª—è–µ—Ç, —Å–∫–æ–ª—å–∫–æ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
const getMillisecondsUntilExecution = (): number => {
    const now = new Date();
    const nextExecution = new Date(Date.UTC(
        now.getUTCFullYear(),
        now.getUTCMonth(),
        now.getUTCDate(),
        EXECUTION_HOUR,
        EXECUTION_MINUTE,
        0,
        0
    ));

    // –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤—Ç—Ä–∞
    if (now >= nextExecution) {
        nextExecution.setUTCDate(nextExecution.getUTCDate() + 1);
    }

    return nextExecution.getTime() - now.getTime();
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
const scheduleDailyTask = () => {
    const timeUntilExecution = getMillisecondsUntilExecution();

    console.log(`‚è≥ –°–ª–µ–¥—É—é—â–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ ${Math.round(timeUntilExecution / 1000 / 60)} –º–∏–Ω—É—Ç`);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º setTimeout –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    setTimeout(() => {
        dailyFunction();
        // –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—É—Å–∫ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ (24 —á–∞—Å–∞)
        setInterval(dailyFunction, 1 * 60 * 1000);
    }, timeUntilExecution);
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
scheduleDailyTask();
