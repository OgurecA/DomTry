import { Metaplex, keypairIdentity } from "@metaplex-foundation/js";
import { Connection, PublicKey } from "@solana/web3.js";
import sqlite3 from "sqlite3";

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Solana
const SOLANA_RPC_URL = "https://api.devnet.solana.com"; // –∏–ª–∏ —Å–≤–æ–π RPC
const connection = new Connection(SOLANA_RPC_URL);

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Metaplex
const metaplex = Metaplex.make(connection);

// –°–ø–∏—Å–æ–∫ NFT-–∞–¥—Ä–µ—Å–æ–≤ (–ø—É–±–ª–∏—á–Ω—ã–µ –∫–ª—é—á–∏)
const NFT_PUBLIC_KEYS = [
    "oLEyYPH98oYZQjzXLSXvV9L2Pcr2tPQbPfnYA1EFEF8", 
    "2c7rWrzkNuFYARxKxYS71SQZZaRsVxxoSVKcp8mdptg5", 
    "BpP4tmSJ3XNzpyEEmrbrUjotDx38weao9NMskeFRd9tY"
].map(key => new PublicKey(key));

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ NFT
const getNftAttributes = async (nftPublicKey: PublicKey) => {
    try {
        const nftMetadata = await metaplex.nfts().findByMint({ mintAddress: nftPublicKey });

        if (!nftMetadata || !nftMetadata.json) {
            console.log(`‚ö† –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è ${nftPublicKey.toBase58()} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
            return null;
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
        const attributes = nftMetadata.json.attributes || [];

        console.log(`‚úÖ NFT ${nftPublicKey.toBase58()} –Ω–∞–π–¥–µ–Ω–æ. –ê—Ç—Ä–∏–±—É—Ç—ã:`, attributes);
        return attributes;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ NFT ${nftPublicKey.toBase58()}:`, error);
        return null;
    }
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ 3 NFT
const fetchNftsAttributes = async () => {
    console.log("üîç –ü–æ–∏—Å–∫ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –¥–ª—è 3 NFT...");
    
    const results = await Promise.all(NFT_PUBLIC_KEYS.map(getNftAttributes));

    if (!results || results.length !== 3) {
        console.error("‚ùå –û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ NFT –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
        return;
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è TeamPoints –∏ SelfPoints –¥–ª—è –∫–∞–∂–¥–æ–π NFT
    const [bikAttributes, krisaAttributes, dragonAttributes] = results;

    const getAttributeValue = (attributes: any[], traitType: string): number => {
        const foundAttribute = attributes.find(attr => attr.trait_type === traitType);
        return foundAttribute ? Number(foundAttribute.value) || 0 : 0;
    };

    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
    const bikSelfPoints = getAttributeValue(bikAttributes, "SelfPoints");
    const bikTeamPoints = getAttributeValue(bikAttributes, "TeamPoints");

    const krisaSelfPoints = getAttributeValue(krisaAttributes, "SelfPoints");
    const krisaTeamPoints = getAttributeValue(krisaAttributes, "TeamPoints");

    const dragonSelfPoints = getAttributeValue(dragonAttributes, "SelfPoints");
    const dragonTeamPoints = getAttributeValue(dragonAttributes, "TeamPoints");

    console.log("‚úÖ –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã:");
    console.log(`Bik - SelfPoints: ${bikSelfPoints}, TeamPoints: ${bikTeamPoints}`);
    console.log(`Krisa - SelfPoints: ${krisaSelfPoints}, TeamPoints: ${krisaTeamPoints}`);
    console.log(`Dragon - SelfPoints: ${dragonSelfPoints}, TeamPoints: ${dragonTeamPoints}`);

    return {
        bik: { selfPoints: bikSelfPoints, teamPoints: bikTeamPoints },
        krisa: { selfPoints: krisaSelfPoints, teamPoints: krisaTeamPoints },
        dragon: { selfPoints: dragonSelfPoints, teamPoints: dragonTeamPoints },
    };
};

const updateTeamPoints = async () => {
    console.log("üõ† –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–Ω—ã—Ö –æ—á–∫–æ–≤...");

    try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ animalkey (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—É–±–ª–∏)
        const players = await new Promise<any[]>((resolve, reject) => {
            db.all("SELECT publickey, team, animalkey, animalkeycontrol FROM users", (err, rows) => {
                if (err) reject(err);
                else resolve(rows);
            });
        });

        if (players.length === 0) {
            console.log("‚ö† –ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.");
            return;
        }

        const animalKeyCounts = players.reduce((acc, player) => {
            acc[player.animalkey] = (acc[player.animalkey] || 0) + 1;
            return acc;
        }, {} as Record<string, number>);

        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ —Å **—É–Ω–∏–∫–∞–ª—å–Ω—ã–º** `animalkey`
        const uniquePlayers = players.filter(player => animalKeyCounts[player.animalkey] === 1);

        console.log(`‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ${uniquePlayers.length}`);

        if (uniquePlayers.length === 0) {
            console.log("‚ö† –ù–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤.");
            return;
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã NFT
        const { bik, krisa, dragon } = await fetchNftsAttributes();

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        for (const player of uniquePlayers) {
            let selfPoints = 0;
            let teamPoints = 0;

            if (player.animalkeycontrol === BIK_AUTH) {
                selfPoints = bik.selfPoints;
                teamPoints = bik.teamPoints;
            } else if (player.animalkeycontrol === KRISA_AUTH) {
                selfPoints = krisa.selfPoints;
                teamPoints = krisa.teamPoints;
            } else if (player.animalkeycontrol === DRAGON_AUTH) {
                selfPoints = dragon.selfPoints;
                teamPoints = dragon.teamPoints;
            } else if (player.animalkeycontrol === player.publickey) {
                selfPoints = 1;
                teamPoints = 1;
            } else {
                console.log(`‚ö† –ò–≥—Ä–æ–∫ ${player.publickey} –Ω–µ —Å–≤—è–∑–∞–Ω —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ NFT.`);
                continue;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
            await new Promise((resolve, reject) => {
                db.run(
                    "UPDATE users SET personal_points = personal_points + ?, team_points = team_points + ?, animalkey = ?, animalkeycontrol = ? WHERE publickey = ?",
                    [selfPoints, teamPoints, player.publickey, player.publickey, player.publickey],
                    function (err) {
                        if (err) reject(err);
                        else resolve(null);
                    }
                );
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –∫–æ–º–∞–Ω–¥–µ
            await new Promise((resolve, reject) => {
                db.run(
                    "UPDATE teams SET score = score + ? WHERE id = ?",
                    [teamPoints, player.team],
                    function (err) {
                        if (err) reject(err);
                        else resolve(null);
                    }
                );
            });

            console.log(`‚úÖ –ò–≥—Ä–æ–∫ ${player.publickey}: +${selfPoints} SelfPoints, +${teamPoints} TeamPoints.`);
        }

        console.log("‚úÖ –í—Å–µ –æ—á–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!");

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—á–∫–æ–≤:", error);
    }
};

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database("game.db");

// ‚ö° –ó–∞–¥–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–≤ UTC)
const EXECUTION_HOUR = 13;  // –ß–∞—Å—ã (–æ—Ç 0 –¥–æ 23)
const EXECUTION_MINUTE = 0; // –ú–∏–Ω—É—Ç—ã (–æ—Ç 0 –¥–æ 59)

const BIK_AUTH = process.env.BIK_AUTH;
const KRISA_AUTH = process.env.KRISA_AUTH;
const DRAGON_AUTH = process.env.DRAGON_AUTH;

// –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
const dailyFunction = async () => {
    console.log(`‚úÖ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –≤ ${EXECUTION_HOUR}:${EXECUTION_MINUTE} UTC`);

    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (–¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ)
    



    console.log("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
};

// –§—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª—è–µ—Ç, —Å–∫–æ–ª—å–∫–æ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
const getMillisecondsUntilExecution = (): number => {
    const now = new Date();
    const nextExecution = new Date(Date.UTC(
        now.getUTCFullYear(),
        now.getUTCMonth(),
        now.getUTCDate(),
        EXECUTION_HOUR,
        EXECUTION_MINUTE,
        0,
        0
    ));

    // –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤—Ç—Ä–∞
    if (now >= nextExecution) {
        nextExecution.setUTCDate(nextExecution.getUTCDate() + 1);
    }

    return nextExecution.getTime() - now.getTime();
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
const scheduleDailyTask = () => {
    const timeUntilExecution = getMillisecondsUntilExecution();

    console.log(`‚è≥ –°–ª–µ–¥—É—é—â–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ ${Math.round(timeUntilExecution / 1000 / 60)} –º–∏–Ω—É—Ç`);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º setTimeout –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    setTimeout(() => {
        dailyFunction();
        // –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—É—Å–∫ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ (24 —á–∞—Å–∞)
        setInterval(dailyFunction, 60 * 1000);
    }, timeUntilExecution);
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
scheduleDailyTask();
